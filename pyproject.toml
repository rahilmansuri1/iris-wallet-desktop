[tool.poetry]
name = "iris-wallet-desktop"
version = "0.2.0"
description = ""
readme = "README.md"
license = ""
authors = ["pv-gaurangpatel <gaurangpatel@pointsville.com>"]

# Packages configuration
packages = [
    { include = "src" }
]

# Dependencies
[tool.poetry.dependencies]
python = ">=3.10,<3.13"
pydantic = "2.7.1"
PySide6 = "6.7.3"
requests = "2.31.0"
keyring = "25.2.1"
cleo = "^2.1.0"
pillow = "^10.3.0"
qrcode = "^7.4.2"
pydenticon = "^0.3.0"

# Development dependencies
[tool.poetry.dev-dependencies]
pyqt-toast-notification = "^1.2.0"
pre-commit = "^3.7.1"
google-auth = "^2.30.0"
google-auth-oauthlib = "^1.2.0"
google-auth-httplib2 = "^0.2.0"
google-api-python-client = "^2.133.0"
python-dotenv = "^1.0.1"
bip32utils = "^0.3.post4"
mnemonic = "^0.21"
importlib-resources = "^6.4.0"
importlib-metadata = "^8.0.0"
cryptography = "^43.0.0"
asyncio = "^3.4.3"
requests-cache = "^1.2.1"
pytest-xdist = "^3.6.1"
rgb-lib = "0.3.0a12"
psutil = "^6.1.1"
pyotp = "^2.9.0"
pytest-order = "^1.3.0"
black = "24.4.1"
bump2version = "1.0.1"
pyinstaller = ">=4.5.1"
pylint = "3.1.0"

# Extra package required only for Linux OS, used exclusively in Linux end-to-end tests.
dogtail = {version = "^1.0.5", markers = "sys_platform == 'linux'"}
python3-xlib = {version = "^0.15", markers = "sys_platform == 'linux'"}
python3-pyatspi = {version = "^1.19.0", markers = "sys_platform == 'linux'"}
allure-pytest = {version = "^2.13.5", markers = "sys_platform == 'linux'"}
pyperclip = {version = "^1.9.0", markers = "sys_platform == 'linux'"}
pygobject = {version = "==3.50.0", markers = "sys_platform == 'linux'"}

# Extra package required only for windows os
winsdk = {version = "^1.0.0b10", markers = "sys_platform == 'win32'"}
pywin32 = {version = "^306", markers = "sys_platform == 'win32'"}

# Scripts
[tool.poetry.scripts]
iris-wallet = "src.main:main"
unit-test = "pytest tests --cov=src --cov-report=html:coverage-report --html=coverage-report/pytest_report.html"
reset-app = "src.utils.reset_app:main"
build-iris-wallet = "build_script:main"
single-test = "e2e_tests.e2e_runner:single_test"
e2e-test = "e2e_tests.e2e_runner:e2e_test"
result-embedded = "e2e_tests.e2e_runner:result_embedded"
result-remote = "e2e_tests.e2e_runner:result_remote"
regtest-start = "e2e_tests.e2e_runner:run_regtest"

# Build system

[tool.poetry.group.test.dependencies]
pytest = "^8.2.1"
pytest-qt = "^4.4.0"
pytest-mock = "^3.14.0"
coverage = "^7.5.3"
pytest-html = "^4.1.1"
pytest-cov = "^5.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# Black configuration
[tool.black]
line-length = 88
target-version = ["py38"]
include = ".pyi?$"
exclude = '''
/(
  \.eggs
  \.git
  \.hg
  \.mypy_cache
  \.tox
  \.venv
  _build
  buck-out
  build
  dist
)/
foo.py
'''
